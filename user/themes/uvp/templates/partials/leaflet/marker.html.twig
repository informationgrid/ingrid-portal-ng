{% if isSearch %}
    {% set getMarkerApi = "rest/getSearchMarkers?" ~ uri.query %}
    {% set facetKey = "procedure" %}
{% else %}
    {% set getMarkerApi = "rest/getMapMarkers?" %}
    {% set facetKey = "legend" %}

{% endif %}

<script>
    function showMarker(m) {
        if(m.target.options.bbox){
           m.target.bbox=L.rectangle(m.target.options.bbox, {color: "blue", weight: 3, fill: false});
            if(map){
                map.addLayer(m.target.bbox);
            }
        }
    }

    function hideMarker(m) {
        if(m.target.bbox){
            if(map){
                map.removeLayer(m.target.bbox);
            }
        }
    }

    var mapSizeX;
    var popupMarkerSize;
    var popupMarkerOptions = {};

    if(map){
        if(map._size){
            mapSizeX = map._size.x;
        }
    }

    if(mapSizeX){
        if(mapSizeX < 310){
            popupMarkerOptions = {
                maxWidth: 180
            };
        }
    }

    // "Zulassungsverfahren" markers
    var mapMarkerZV = L.markerClusterGroup({
        id: 'mapMarkerZV',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-10' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerZV_big = null;

    var mapMarkerZV_time = L.markerClusterGroup({
        id: 'mapMarkerZV_time',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-10' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerZV_time_big = null;

    // "Ausländische Verfahren" markers
    var mapMarkerAV = L.markerClusterGroup({
        id: 'mapMarkerAV',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-11' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerAV_big = null;

    var mapMarkerAV_time = L.markerClusterGroup({
        id: 'mapMarkerAV_time',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-11' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerAV_time_big = null;

    // "Raumordnungsverfahren" markers
    var mapMarkerRO = L.markerClusterGroup({
        id: 'mapMarkerRO',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-13' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerRO_big = null;

    var mapMarkerRO_time = L.markerClusterGroup({
        id: 'mapMarkerRO_time',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-13' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerRO_time_big = null;

    // "Linienbestimmungen" markers
    var mapMarkerLI = L.markerClusterGroup({
        id: 'mapMarkerLI',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-14' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerLI_big = null;

    var mapMarkerLI_time = L.markerClusterGroup({
        id: 'mapMarkerLI_time',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-14' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerLI_time_big = null;

    // "Negative Vorprüfungen" markers
    var mapMarkerNV = L.markerClusterGroup({
        id: 'mapMarkerNV',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-12' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerNV_big = null;

    var mapMarkerNV_time = L.markerClusterGroup({
        id: 'mapMarkerNV_time',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-12' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkerNV_time_big = null;

    // "Bebauungsplänen" markers
    var mapMarkersDevPlan = L.markerClusterGroup({
        id: 'mapMarkersDevPlan',
        iconCreateFunction: function (cluster) {
            var childCount = cluster.getChildCount();
            var c = ' marker-cluster-';
            if (childCount < 10) {
                c += 'small';
            } else if (childCount < 100) {
                c += 'medium';
            } else {
                c += 'large';
            }
            if(smallIcons){
             c += ' light';
            }
            return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster marker-cluster-dev-plan' + c, iconSize: new L.Point(40, 40) });
        }
    });
    var mapMarkersDevPlan_big = null;

    var mapFilter = $('.map-filter ul li div');
    var overlayers = {};
    var legendCounter = {{ legend|raw }};
    if(mapFilter && mapFilter.length > 0) {
        if(map){
            mapFilter.on('mouseover', function () {
                map.dragging.disable();
                map.touchZoom.disable();
                map.doubleClickZoom.disable();
                map.scrollWheelZoom.disable();
                map.boxZoom.disable();
                map.keyboard.disable();
            });
            mapFilter.on('mouseout', function () {
                map.dragging.enable();
                map.touchZoom.enable();
                map.doubleClickZoom.enable();
                map.scrollWheelZoom.enable();
                map.boxZoom.enable();
                map.keyboard.enable();
            });
        }
        if(legendCounter){
            legendCounter[0].items.forEach(function (item) {
                if (item.docCount > 0) {
                    if (item.value === "obj_class_zv") {
                        createLegendEntry(map, mapFilter, [mapMarkerZV_time, mapMarkerZV], 'blue', 'mapMarkerZV', 'Zulassungsverfahren', 'zv', '', '#if($restUrlMarker_time)$restUrlMarker_time#end');
                    } else if (item.value === "obj_class_nv") {
                        createLegendEntry(map, mapFilter, [mapMarkerNV_time, mapMarkerNV], 'orange', 'mapMarkerNV', 'Negative Vorpr&#252;fungen', 'nv', '', '#if($restUrlMarker4_time)$restUrlMarker4_time#end');
                    } else if (item.value === "obj_class_ro") {
                        createLegendEntry(map, mapFilter, [mapMarkerRO_time, mapMarkerRO], 'red', 'mapMarkerRO', 'Raumordnungsverfahren', 'ro', '', '#if($restUrlMarker2_time)$restUrlMarker2_time#end');
                    } else if (item.value === "obj_class_li") {
                        createLegendEntry(map, mapFilter, [mapMarkerLI_time, mapMarkerLI], 'purple', 'mapMarkerLI', 'Linienbestimmungen', 'li', '', '#if($restUrlMarker5_time)$restUrlMarker5_time#end');
                    } else if (item.value === "obj_class_av") {
                        createLegendEntry(map, mapFilter, [mapMarkerAV_time, mapMarkerAV], 'black', 'mapMarkerAV', 'Ausl&#228;ndische Vorhaben', 'av', '', '#if($restUrlMarker3_time)$restUrlMarker3_time#end');
                    } else if (item.value === "obj_class_blp") {
                        createLegendEntry(map, mapFilter, [mapMarkersDevPlan], 'green', 'mapMarkersDevPlan', 'Bauleitplanung', 'blp');
                    }
                }
            });
        }
    }

    if(mapFilterXs && mapFilterXs.length > 0) {
        if(legendCounter){
            legendCounter[0].items.forEach(function (item) {
                if (item.docCount > 0) {
                    if (item.value === "obj_class_zv") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerZV], 'blue', 'mapMarkerZV', 'Zulassungsverfahren', 'zv', 'style="padding:0px"');
                    } else if (item.value === "obj_class_nv") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerNV], 'orange', 'mapMarkerNV', 'Negative Vorpr&#252;fungen', 'nv', 'style="padding:0px"');
                    } else if (item.value === "obj_class_ro") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerRO], 'red', 'mapMarkerRO', 'Raumordnungsverfahren', 'ro', 'style="padding:0px"');
                    } else if (item.value === "obj_class_li") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerLI], 'purple', 'mapMarkerLI', 'Linienbestimmungen', 'li', 'style="padding:0px"');
                    } else if (item.value === "obj_class_av") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerAV], 'black', 'mapMarkerAV', 'Ausl&#228;ndische Vorhaben', 'av', 'style="padding:0px"');
                    } else if (item.value === "obj_class_blp") {
                        createLegendEntry(map, mapFilterXs, [mapMarkersDevPlan], 'green', 'mapMarkersDevPlan', 'Bauleitplanung', 'blp', 'style="padding:0px"');
                    }
                }
            });
        }
    }

    var mapFilterXs = $('.map-filter-xs');
    if(mapFilterXs && mapFilterXs.length > 0) {
        if(legendCounter){
            legendCounter[0].items.forEach(function (item) {
                if (item.docCount > 0) {
                    if (item.value === "obj_class_zv") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerZV], 'blue', 'mapMarkerZV', 'Zulassungsverfahren', 'zv', 'style="padding:0px"');
                    } else if (item.value === "obj_class_nv") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerNV], 'orange', 'mapMarkerNV', 'Negative Vorpr&#252;fungen', 'nv', 'style="padding:0px"');
                    } else if (item.value === "obj_class_ro") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerRO], 'red', 'mapMarkerRO', 'Raumordnungsverfahren', 'ro', 'style="padding:0px"');
                    } else if (item.value === "obj_class_li") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerLI], 'purple', 'mapMarkerLI', 'Linienbestimmungen', 'li', 'style="padding:0px"');
                    } else if (item.value === "obj_class_av") {
                        createLegendEntry(map, mapFilterXs, [mapMarkerAV], 'black', 'mapMarkerAV', 'Ausl&#228;ndische Vorhaben', 'av', 'style="padding:0px"');
                    } else if (item.value === "obj_class_blp") {
                        createLegendEntry(map, mapFilterXs, [mapMarkersDevPlan], 'green', 'mapMarkersDevPlan', 'Bauleitplanung', 'blp', 'style="padding:0px"');
                    }
                }
            });
        }
    }
    if(map) {
        map.on('layeradd', onOverlayAdd);
        var mapParamLayer = '{{ requestLayer }}';
        var mapParamLayers = [];
        if (mapParamLayer.length === 0) {
            if ({{ checkedCategoryBLP }}) {
                mapParamLayers.push('blp');
            }
            if ({{ checkedCategoryZV }}) {
                mapParamLayers.push('zv');
            }
            if ({{ checkedCategoryAV }}) {
                mapParamLayers.push('av');
            }
            if ({{ checkedCategoryNV }}) {
                mapParamLayers.push('nv');
            }
            if ({{ checkedCategoryRO }}) {
                mapParamLayers.push('ro');
            }
            if ({{ checkedCategoryLI }}) {
                mapParamLayers.push('li');
            }
        } else {
            mapParamLayers = mapParamLayer.split(',');
        }
        if (mapParamLayers.indexOf('blp') > -1) {
            if (mapMarkersDevPlan) {
                if (mapAdditional) {
                    mapMarkersDevPlan_big = cloneLayer(mapMarkersDevPlan);
                    mapAdditional.addLayer(mapMarkersDevPlan_big);
                }
                map.addLayer(mapMarkersDevPlan);
                $('#mapMarkersDevPlan').prop('checked', true);
                $('#mapMarkersDevPlan').next().addClass('checked');
                if (mapParamLayers.indexOf('blp') === -1) {
                    mapParamLayers.push('blp');
                }
            }
        }
        if (mapParamLayers.indexOf('zv') > -1) {
            if (mapMarkerZV || mapMarkerZV_time) {
                $('#mapMarkerZV').prop('checked', true);
                $('#mapMarkerZV').next().addClass('checked');
                var checkboxTime = $('#mapMarkerZV_time');
                if (checkboxTime.is(':checked')) {
                    if (mapAdditional) {
                        mapMarkerZV_time_big = cloneLayer(mapMarkerZV_time);
                        mapAdditional.addLayer(mapMarkerZV_time_big);
                    }
                    map.addLayer(mapMarkerZV_time);
                    checkboxTime.closest('.control-group').removeClass('is-hidden');
                } else {
                    if (mapAdditional) {
                        mapMarkerZV_big = cloneLayer(mapMarkerZV);
                        mapAdditional.addLayer(mapMarkerZV_big);
                    }
                    map.addLayer(mapMarkerZV);
                }
                if (mapParamLayers.indexOf('zv') === -1) {
                    mapParamLayers.push('zv');
                }
            }
        }
        if (mapParamLayers.indexOf('av') > -1) {
            if (mapMarkerAV || mapMarkerAV_time) {
                $('#mapMarkerAV').prop('checked', true);
                $('#mapMarkerAV').next().addClass('checked');
                var checkboxTime = $('#mapMarkerAV_time');
                if (checkboxTime.is(':checked')) {
                    if (mapAdditional) {
                        mapMarkerAV_time_big = cloneLayer(mapMarkerAV_time);
                        mapAdditional.addLayer(mapMarkerAV_time_big);
                    }
                    map.addLayer(mapMarkerAV_time);
                    checkboxTime.closest('.control-group').removeClass('is-hidden');
                } else {
                    if (mapAdditional) {
                        mapMarkerAV_big = cloneLayer(mapMarkerAV);
                        mapAdditional.addLayer(mapMarkerAV_big);
                    }
                    map.addLayer(mapMarkerAV);
                }
                if (mapParamLayers.indexOf('av') === -1) {
                    mapParamLayers.push('av');
                }
            }
        }
        if (mapParamLayers.indexOf('ro') > -1) {
            if (mapMarkerRO || mapMarkerRO_time) {
                $('#mapMarkerRO').prop('checked', true);
                $('#mapMarkerRO').next().addClass('checked');
                var checkboxTime = $('#mapMarkerRO_time');
                if (checkboxTime.is(':checked')) {
                    if (mapAdditional) {
                        mapMarkerRO_time_big = cloneLayer(mapMarkerRO_time);
                        mapAdditional.addLayer(mapMarkerRO_time_big);
                    }
                    map.addLayer(mapMarkerRO_time);
                    checkboxTime.closest('.control-group').removeClass('is-hidden');
                } else {
                    if (mapAdditional) {
                        mapMarkerRO_big = cloneLayer(mapMarkerRO);
                        mapAdditional.addLayer(mapMarkerRO_big);
                    }
                    map.addLayer(mapMarkerRO);
                }
                if (mapParamLayers.indexOf('ro') === -1) {
                    mapParamLayers.push('ro');
                }
            }
        }
        if (mapParamLayers.indexOf('li') > -1) {
            if (mapMarkerLI || mapMarkerLI_time) {
                $('#mapMarkerLI').prop('checked', true);
                $('#mapMarkerLI').next().addClass('checked');
                var checkboxTime = $('#mapMarkerLI_time');
                if (checkboxTime.is(':checked')) {
                    if (mapAdditional) {
                        mapMarkerLI_time_big = cloneLayer(mapMarkerLI_time);
                        mapAdditional.addLayer(mapMarkerLI_time_big);
                    }
                    map.addLayer(mapMarkerLI_time);
                    checkboxTime.closest('.control-group').removeClass('is-hidden');
                } else {
                    if (mapAdditional) {
                        mapMarkerLI_big = cloneLayer(mapMarkerLI);
                        mapAdditional.addLayer(mapMarkerLI_big);
                    }
                    map.addLayer(mapMarkerLI);
                }
                if (mapParamLayers.indexOf('li') === -1) {
                    mapParamLayers.push('li');
                }
            }
        }
        if (mapParamLayers.indexOf('nv') > -1) {
            if (mapMarkerNV || mapMarkerNV_time) {
                $('#mapMarkerNV').prop('checked', true);
                $('#mapMarkerNV').next().addClass('checked');
                var checkboxTime = $('#mapMarkerNV_time');
                if (checkboxTime.is(':checked')) {
                    if (mapAdditional) {
                        mapMarkerNV_time_big = cloneLayer(mapMarkerNV_time);
                        mapAdditional.addLayer(mapMarkerNV_time_big);
                    }
                    map.addLayer(mapMarkerNV_time);
                    checkboxTime.closest('.control-group').removeClass('is-hidden');
                } else {
                    if (mapAdditional) {
                        mapMarkerNV_big = cloneLayer(mapMarkerNV);
                        mapAdditional.addLayer(mapMarkerNV_big);
                    }
                    map.addLayer(mapMarkerNV);
                }
                if (mapParamLayers.indexOf('nv') === -1) {
                    mapParamLayers.push('nv');
                }
            }
        }
        if (mapParamLayers.length > 0) {
            updateQueryStringParameter('layer', mapParamLayers.toString());
        }
    }

    var mapPosition = [{{ mapPosition }}];
    var mapExtent = [{{ mapExtent }}];
    var mapLat;
    var mapLng;
    var mapZoom;
    var mapBounds;
    var mapParamExtent = '{{ mapParamExtent }}';
    if(mapParamExtent) {
        mapParamExtent = mapParamExtent.split(',');
    }
    if(mapPosition.length > 0){
        mapLat = parseFloat(mapPosition[0]);
        mapLng = parseFloat(mapPosition[1]);
        mapZoom = parseFloat(mapPosition[2]);
    }

    if('{{ mapParamN }}' && '{{ mapParamE }}' && '{{ mapParamZoom }}') {
        mapLat = parseFloat('{{ mapParamN }}') || mapLat;
        mapLng = parseFloat('{{ mapParamE }}') || mapLng;
        mapZoom = parseFloat('{{ mapParamZoom }}') || mapZoom;
        map.setView(new L.LatLng(mapLat, mapLng), mapZoom);
    } else if(mapParamExtent && mapParamExtent.length === 4){
        mapBounds = L.latLngBounds(
          L.latLng(mapParamExtent[0], mapParamExtent[1]),
          L.latLng(mapParamExtent[2], mapParamExtent[3])
        );
    } else if(mapExtent.length > 0){
        mapBounds = L.latLngBounds(
          L.latLng(mapExtent[0], mapExtent[1]),
          L.latLng(mapExtent[2], mapExtent[3])
        );
    }
    if(mapBounds){
        map.fitBounds(mapBounds);
    }
    map.on('moveend', function(e){
        var mapLatLng = this.getCenter();
        if(mapLatLng) {
            mapLat = this.getCenter().lat.toFixed(2);
            mapLng = this.getCenter().lng.toFixed(2);
            updateQueryStringParameter('N', mapLat);
            updateQueryStringParameter('E', mapLng);
        }
        if(this.getZoom()) {
            mapZoom = this.getZoom();
            updateQueryStringParameter('zoom', mapZoom);
        }
    });


    function onOverlayAdd(e){
        if ("{{ getMarkerApi }}") {
            if (e.layer.options.id === 'mapMarkersDevPlan') {
                if (mapMarkersDevPlan.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkersDevPlan;
                    var markerColor = 'green';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_blp')|raw }}", 1, marker, markerColor, map, mapMarkersDevPlan_big);
                }
            } else if (e.layer.options.id === 'mapMarkerZV') {
                if (mapMarkerZV.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerZV;
                    var markerColor = 'blue';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_zv')|raw }}", 1, marker, markerColor, map, mapMarkerZV_big);
                }
            } else if (e.layer.options.id === 'mapMarkerZV_time') {
                if (mapMarkerZV_time.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerZV_time;
                    var markerColor = 'blue';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_zv_time')|raw }}", 1, marker, markerColor, map, mapMarkerZV_time_big);
                }
            } else if (e.layer.options.id === 'mapMarkerRO') {
                if (mapMarkerRO.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerRO;
                    var markerColor = 'red';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_ro')|raw }}", 1, marker, markerColor, map, mapMarkerRO_big);
                }
            } else if (e.layer.options.id === 'mapMarkerRO_time') {
                if (mapMarkerRO_time.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerRO_time;
                    var markerColor = 'red';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_ro_time')|raw }}", 1, marker, markerColor, map, mapMarkerRO_time_big);
                }
            } else if (e.layer.options.id === 'mapMarkerLI') {
                if (mapMarkerLI.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerLI;
                    var markerColor = 'purple';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_li')|raw }}", 1, marker, markerColor, map, mapMarkerLI_big);
                }
            } else if (e.layer.options.id === 'mapMarkerLI_time') {
                if (mapMarkerLI_time.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerLI_time;
                    var markerColor = 'purple';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_li_time')|raw }}", 1, marker, markerColor, map, mapMarkerLI_time_big);
                }
            } else if (e.layer.options.id === 'mapMarkerAV') {
                if (mapMarkerAV.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerAV;
                    var markerColor = 'black';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_av')|raw }}", 1, marker, markerColor, map, mapMarkerAV_big);
                }
            } else if (e.layer.options.id === 'mapMarkerAV_time') {
                if (mapMarkerAV_time.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerAV_time;
                    var markerColor = 'black';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_av_time')|raw }}", 1, marker, markerColor, map, mapMarkerAV_time_big);
                }
            } else if (e.layer.options.id === 'mapMarkerNV') {
                if (mapMarkerNV.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerNV;
                    var markerColor = 'orange';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_nv')|raw }}", 1, marker, markerColor, map, mapMarkerNV_big);
                }
            } else if (e.layer.options.id === 'mapMarkerNV_time') {
                if (mapMarkerNV_time.getLayers().length === 0) {
                    map.spin(true);
                    var marker = mapMarkerNV_time;
                    var markerColor = 'orange';
                    loadMarkers("{{ (getMarkerApi ~ '&' ~ facetKey ~ '=obj_class_nv_time')|raw }}", 1, marker, markerColor, map, mapMarkerNV_time_big);
                }
            }
        }
    }

    function getIcon(smallIcons, iconColor, enablePopUp) {
        var icon;
        if(smallIcons){
            icon = L.icon({
                iconUrl: '/user/themes/ingrid/images/pins/icon_pin_small_' + iconColor + '.png',
                iconSize: [6, 6],
                iconAnchor: [3, 3]
            });
        } else {
             icon = L.AwesomeMarkers.icon({
                markerColor: iconColor,
                className: enablePopUp ? 'awesome-marker' : 'awesome-marker leaflet-interactive-disable',
                prefix: 'icon'
            });
        }
        return icon;
    }

    function createMarker(mapMarkers, a, iconColor) {
        var title = a['title'];
        var lat = a['lat'];
        var lng = a['lon'];
        if (lng && lat) {
            var popUpHtml = 'Bitte warten ...';
            var icon = getIcon(smallIcons, iconColor, enablePopUp);
            var marker = L.marker(new L.LatLng(lat, lng), {
                title: title,
                icon: icon,
                bbox: a['bbox'],
                interactive: !smallIcons
            });
            marker.hit = a;
            if (enablePopUp) {
                marker.bindPopup(popUpHtml, popupMarkerOptions);
                marker.on('click', onMapClick);
                marker.on('popupopen', showMarker);
                marker.on('popupclose', hideMarker);
            }
            mapMarkers.addLayer(marker);
        }
    }

    function onMapClick(e) {
        var popup = e.target.getPopup();
        var hit = e.target.hit;
        if (hit.isBLP) {
            popup.setContent(createPopUpBLP(hit));
        } else {
            popup.setContent(createPopUp(hit));
        }
        popup.update();
    }

    function createPopUp(data) {
        var popUpHtml = '';
        var procedure = data.procedure;
        var categories = data.categories;

        if(procedure && procedure.length > 0){
            popUpHtml += '<div class="helper text"><small>' + procedure + '</small></div>';
        }

        popUpHtml += '<a href="{{ page.find('/detail').url }}?docuuid=' + data.uuid + '" target="_blank" title="' + data.title + '"><h5>' + data.title + '</h5></a>';

        if(categories && categories.length > 0){
            var categoryList = [];
            for (category in categories){
                var value = categories[category].name;
                var id = categories[category].id;
                if(categoryList.indexOf(value) === -1){
                    popUpHtml += '<div class="helper icon">';
                    popUpHtml += '<span class="ic-ic-' + id + '"></span>';
                    popUpHtml += '<span class="text">' + value + '</span>';
                    popUpHtml += '</div>';
                    categoryList.push(value);
                }
            }
        }
        if(data.steps && data.steps.length > 0){
            popUpHtml += '<h6 class="no-margin">Letzter Verfahrensschritt:</h6>';
            popUpHtml += '<p>' + data.steps[data.steps.length - 1] + '</p>';
        }
        return popUpHtml;
    }

    function createPopUpBLP(data) {
        var descr = data.descr;
        var bpInfos = data.bpInfos;
        var popUpHtml = '';
        if(enablePopUp){
            popUpHtml += '<h5>' + data.title + '</h5>';
            if(descr && descr .length > 0){
                popUpHtml += '<h6 class="no-margin">Mitgliedsgemeinden:</h6>';
                popUpHtml += '<p class="leaflet-hyphens">' + descr + '</p>';
            }

            if(bpInfos && bpInfos.length > 0){
                popUpHtml += '<h6 class="no-margin">Nutzen Sie die folgenden Links um zu den Bauleitplanungs-Seiten zu gelangen:</h6>';
                for (var j = 0; j < bpInfos.length; j++) {
                    var bpInfo = bpInfos[j];
                    if(bpInfo.url){
                        var url = bpInfo.url;
                        if(url.indexOf("http") === -1){
                            url = "http://" + url;
                        }
                        if(bpInfo.tags){
                            var tags = [].concat(bpInfo.tags);
                            for (var k = 0; k < tags.length; k++) {
                                var tag = tags[k];
                                if(tag){
                                    var title;
                                    if(tag === "v"){
                                        title = 'Wirksame/rechtskr&auml;ftige Bauleitpl&auml;ne';
                                    }else if(tag === "p"){
                                        title = 'Bauleitpl&auml;ne im Beteiligungsverfahren';
                                    }else if(tag === "v_fnp"){
                                        title = 'Wirksame/rechtskr&auml;ftige Fl&auml;chennutzungspl&auml;ne';
                                    }else if(tag === "p_fnp"){
                                        title = 'Fl&auml;chennutzungspl&auml;ne im Beteiligungsverfahren';
                                    }else if(tag === "v_bp"){
                                        title = 'Wirksame/rechtskr&auml;ftige Bebauungspl&auml;ne';
                                    }else if(tag === "p_bp"){
                                        title = 'Bebauungspl&auml;ne im Beteiligungsverfahren';
                                    }
                                    if(title){
                                        popUpHtml += '<a class="icon" href="' + url + '" target="_blank"><span class="ic-ic-arrow"></span><span class="text">' + title + '</span></a>';
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return popUpHtml;
    }

    function createLegendEntry(map, mapFilter, markers, color, id, title, paramEntry, style, restUrlTime){
        var html = '<div class="form-element boxed map ' + color + '" ' + style + '>';
        html += '<div class="input-check">' +
            '<div class="control-group">' +
            '<label class="control control--checkbox" for="' + id + '">' +
            '<input id="' + id + '" name="' + id + '" type="checkbox">' +
            '<span class="control__indicator"></span>' +
            title + '</label>' +
            '</div>';
        if(markers.length > 1 && restUrlTime && restUrlTime.length > 0) {
            html += '<div class="control-group is-hidden">' +
                '<label class="control toggle" title="{{ "COMMON.TOGGLE_APPROVAL_DATE_TOOLTIP"|t }}">' +
                '<input id="' + id + '_time" name="' + id + '_time" type="checkbox" checked>' +
                '<span class="toggle-slider round"></span>' +
                '</label>' +
                '<span class="toggle-label checked">{{ "COMMON.TOGGLE_APPROVAL_DATE_MAP_ON"|t }}</span>'+
                '<span class="toggle-label unchecked is-hidden">{{ "COMMON.TOGGLE_APPROVAL_DATE_MAP_ON"|t }}</span>'+
                '</div>';
        }
        html += '</div></div>';
        mapFilter.append( html );

        var legendEntry = $('#' + id);
        var checkboxTime = $('#' + id + '_time');

        legendEntry.on('change', function() {
            var paramLayer = getQueryStringParameter('layer');
            var paramLayers = [];
            if(paramLayer) {
                paramLayers = paramLayer.split(',');
            }
            const index = paramLayers.indexOf(paramEntry);
            if (legendEntry.is(':checked')) {
                $(legendEntry).prop('checked', true);
                $(legendEntry).next().addClass('checked');
                if(checkboxTime.length > 0) {
                    if(checkboxTime.is(':checked')) {
                        map.addLayer(markers[0]);
                    } else {
                        map.addLayer(markers[1]);
                    }
                    checkboxTime.closest('.control-group').removeClass('is-hidden');
                } else {
                    map.addLayer(markers[0]);
                }
                if(index === -1) {
                    paramLayers.push(paramEntry);
                }
            } else {
                $(legendEntry).next().removeClass('checked');
                if(checkboxTime.length > 0) {
                    map.removeLayer(markers[0]);
                    map.removeLayer(markers[1]);
                    checkboxTime.closest('.control-group').addClass('is-hidden');
                } else {
                    map.removeLayer(markers[0]);
                }
                if (index > -1) {
                  paramLayers.splice(index, 1);
                }
            }
            updateQueryStringParameter('layer', paramLayers.toString());
        });

        if(markers.length > 1) {
            checkboxTime.on('change', function() {
                if (legendEntry.is(':checked')) {
                    var checkLabel = checkboxTime.closest('.control-group').find('.toggle-label.checked');
                    var uncheckLabel = checkboxTime.closest('.control-group').find('.toggle-label.unchecked');

                    if ($(this).is(':checked')) {
                        map.addLayer(markers[0]);
                        map.removeLayer(markers[1]);
                        checkLabel.removeClass('is-hidden');
                        uncheckLabel.addClass('is-hidden');
                    } else {
                        map.addLayer(markers[1]);
                        map.removeLayer(markers[0]);
                        uncheckLabel.removeClass('is-hidden');
                        checkLabel.addClass('is-hidden');
                    }
                }
            });
        }
    }

    function loadMarkers(url, page, marker, markerColor, map, markerBig) {
        jQuery.get(url + "&page=" + page)
        .done(function(data, textStatus, jqxhr) {
            json = JSON.parse(data);
            json.forEach(function(item){
                createMarker(marker, item, markerColor);
                if (markerBig) {
                    createMarker(markerBig, item, markerColor);
                }
            });
            if(json.length !== 0) {
                page += 1;
                loadMarkers(url, page, marker, markerColor, map, markerBig);
            } else {
                map.spin(false);
            }
        })
        .fail(function () {
            map.spin(false);
        });
    }
</script>