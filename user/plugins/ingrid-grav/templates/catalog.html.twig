{% extends 'partials/base.html.twig' %}

{% block content %}
    {% import 'macros/hit_macros.html.twig' as macros %}

    {% set catalogLeafRest = 'rest/getCatalogLeaf' %}
    <div class="search-filtered row content-small">
        <div class="columns catalog">
            {% for partner in partners %}
                {% if displayPartner %}
                    {{ macros.render_catalog_node(partner, page.find('/detail').url, catalogLeafRest, openOnNewTab) }}
                {% else %}
                    {% for provider in partner.children %}
                        {{ macros.render_catalog_node(provider, page.find('/detail').url, catalogLeafRest, openOnNewTab) }}
                    {% endfor %}
                {% endif %}
            {% endfor %}
            <form action="{{ page.find('/catalog').url }}" method="post" name="extsearch" id="extsearch">
                <button type="submit" class="button btn btn--secondary btn--small" style="width:100%" name="submitReload">
                    {{ "COMMON.FORM_BUTTON_RELOAD"|t }}
                </button>
            </form>
        </div>
    </div>

    <script>
        window.onload = function () {
            var param = 'openNodes';
            var params = getQueryStringParameter(param);
            if (!params) {
                {% if openNodes  %}
                var defaultOpenNodes = ["{{ openNodes|join('", "')|raw }}"];
                if (defaultOpenNodes) {
                    updateQueryStringParameter('openNodes', defaultOpenNodes.toString());
                }
                params = getQueryStringParameter(param);
                {% endif %}
            }
            if (params) {
                var paramsSplit = params.split(',');
                paramsSplit.sort(function(a, b){
                    if(a < b) { return -1; }
                    if(a > b) { return 1; }
                    return 0;
                });

                var filterParams = [];
                var paramIndex;

                for(var paramsSplitIndex in paramsSplit) {
                    var nodeId = paramsSplit[paramsSplitIndex];
                    var nodeLevel = nodeId.split('-')[0];
                    if(!paramIndex || nodeLevel !== paramIndex) {
                        paramIndex = nodeLevel;
                        var filter = paramsSplit.filter(function(e){
                            return e.indexOf(paramIndex) === 0;
                        })
                        filterParams.push(filter);
                    }
                }
                for(var filterParamIndex in filterParams) {
                    var filterParam = filterParams[filterParamIndex];
                    for(var nodeIndex in filterParam) {
                        var nodeId = filterParam[nodeIndex];
                        updateLeafWaiting(nodeId, 0);
                    }
                }
            }
        }

        function updateLeafWaiting(nodeId, attempt){
            attempt = attempt + 1;
            jQuery.when( $('#' + nodeId).length > 0).then(function(exists){
                if (exists){
                    var node = htmx.find('#' + nodeId);
                    if(node) {
                        htmx.trigger(node, 'click');
                    }
                } else {
                    if (attempt < 20) {
                        setTimeout(function(){
                            updateLeafWaiting(nodeId , attempt);
                        }, 1000);
                    } else {
                        console.log(attempt + ' attempts for node:' + nodeId);
                    }
                }
            });

        }

        function updateLeaf(id, updateParams, evt) {
            if(evt) {
                evt.preventDefault();
                evt.stopPropagation();
            }

            var element = $('#' + id);
            var hasLeafContent = false;
            var param = 'openNodes';
            var params = getQueryStringParameter(param);
            var paramsSplit = params ? params.split(',') : [];
            if (element) {
                var elementAccordion = element.parent('span').parent('.accordion-item-sub');
                var parent = elementAccordion.parent('.accordion-item');
                if (elementAccordion.length > 0) {
                    // Render udk elements
                    var leafContent = elementAccordion.parent().find('.accordion-content').first();
                    if(updateParams) {
                        if (parent.hasClass('is-active')) {
                            parent.removeClass('is-active');
                            element.removeClass('ic-ic-minus');
                            element.addClass('ic-ic-plus');
                            if(leafContent.length !== 0) {
                                leafContent.css('display', '');
                            }
                            if(params) {
                                var index = paramsSplit.indexOf(id);
                                if (index !== -1) {
                                    paramsSplit.splice(index, 1);
                                }
                                updateQueryStringParameter(param, paramsSplit.toString());
                            }
                        } else {
                            parent.addClass('is-active');
                            element.removeClass('ic-ic-plus');
                            element.addClass('ic-ic-minus');

                            if(leafContent.length !== 0) {
                                leafContent.css('display', 'block');
                            }
                            if(!params) {
                                params = id;
                            } else {
                                var index = paramsSplit.indexOf(id);
                                if (index === -1) {
                                    params = params + ',' + id;
                                }
                            }
                            updateQueryStringParameter(param, params);
                        }
                    } else {
                        parent.addClass('is-active');
                        if(leafContent.length !== 0) {
                            leafContent.css('display', 'block');
                        }
                    }
                    var replaceDiv = leafContent.find('div[id^=replace-]');
                    if(replaceDiv.length !== 0 && replaceDiv.children().length > 0) {
                        hasLeafContent = true;
                    } else {
                        if(replaceDiv) {
                            replaceDiv.append('<div class="accordion-item-sub">{{ "CATALOG_HIERARCHY.LOADING"|t }}</div>');
                        }
                    }
                } else {
                    // Render main accordion
                    parent = element.parent('.accordion-item');
                    var leafContent = element.parent().find('.accordion-content').first();
                    if(updateParams) {
                        if (parent.hasClass('is-active')) {
                            parent.removeClass('is-active');
                            if(leafContent.length !== 0) {
                                leafContent.css('display', '');
                            }
                            if(params) {
                                var index = paramsSplit.indexOf(id);
                                if (index !== -1) {
                                paramsSplit.splice(index, 1);
                                }
                                updateQueryStringParameter(param, paramsSplit.toString());
                            }
                        } else {
                            parent.addClass('is-active');
                            if(leafContent.length !== 0) {
                                leafContent.css('display', 'block');
                            }
                            if(!params) {
                                params = id;
                            } else {
                                var index = paramsSplit.indexOf(id);
                                if (index === -1) {
                                    params = params + ',' + id;
                                }
                            }
                            updateQueryStringParameter(param, params);
                        }
                    } else {
                        parent.addClass('is-active');
                        if(leafContent.length !== 0) {
                            leafContent.css('display', 'block');
                        }
                    }
                    if(leafContent.length !== 0 && leafContent.children().length > 0) {
                        hasLeafContent = true;
                    } else {
                        if(leafContent) {
                            leafContent.append('<div class="accordion-item-sub">{{ "CATALOG_HIERARCHY.LOADING"|t }}</div>');
                        }
                    }
                }
            }

        }
    </script>
    {% do assets.addJs('theme://js/htmx.min.js', {group: 'bottom'}) %}
{% endblock %}
